document.addEventListener("DOMContentLoaded", async () => {
  const startButton = document.getElementById("startButton");
  const stopButton = document.getElementById("stopButton");
  const status = document.getElementById("status");
  const conversation = document.getElementById("conversation");
  const waveform = document.getElementById("waveform");
  let mediaRecorder;
  let recordedChunks = [];
  let isListening = false;
  let audioContext;
  let analyser;

  const wakeWord = "hey friday";
  const wakeWordDetector = new WebSocket("ws://localhost:8765/");

  wakeWordDetector.onmessage = (event) => {
      if (event.data === "wake_word_detected") {
          startListening();
      }
  };

  function startListening() {
      if (!isListening) {
          isListening = true;
          status.textContent = "Listening...";
          startButton.style.display = "none";
          stopButton.style.display = "block";
          mediaRecorder.start();
          playSound("start_listening.mp3");
      }
  }

  function stopListening() {
      if (isListening) {
          isListening = false;
          status.textContent = "Processing...";
          stopButton.style.display = "none";
          startButton.style.display = "block";
          mediaRecorder.stop();
          playSound("stop_listening.mp3");
      }
  }

  function playSound(soundFile) {
      const audio = new Audio(`/static/sounds/${soundFile}`);
      audio.play();
  }

  function updateWaveform() {
      requestAnimationFrame(updateWaveform);
      const dataArray = new Uint8Array(analyser.frequencyBinCount);
      analyser.getByteTimeDomainData(dataArray);

      const canvas = waveform;
      const canvasCtx = canvas.getContext("2d");
      const width = canvas.width;
      const height = canvas.height;

      canvasCtx.fillStyle = "rgb(0, 0, 0)";
      canvasCtx.fillRect(0, 0, width, height);
      canvasCtx.lineWidth = 2;
      canvasCtx.strokeStyle = "rgb(0, 255, 0)";
      canvasCtx.beginPath();

      const sliceWidth = (width * 1.0) / dataArray.length;
      let x = 0;

      for (let i = 0; i < dataArray.length; i++) {
          const v = dataArray[i] / 128.0;
          const y = (v * height) / 2;

          if (i === 0) {
              canvasCtx.moveTo(x, y);
          } else {
              canvasCtx.lineTo(x, y);
          }

          x += sliceWidth;
      }

      canvasCtx.lineTo(width, height / 2);
      canvasCtx.stroke();
  }

  try {
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      mediaRecorder = new MediaRecorder(stream);

      audioContext = new (window.AudioContext || window.webkitAudioContext)();
      analyser = audioContext.createAnalyser();
      const source = audioContext.createMediaStreamSource(stream);
      source.connect(analyser);

      updateWaveform();

      mediaRecorder.ondataavailable = (event) => {
          if (event.data.size > 0) recordedChunks.push(event.data);
      };

      mediaRecorder.onstop = async () => {
          const audioBlob = new Blob(recordedChunks, { type: "audio/webm" });
          const formData = new FormData();
          formData.append("audio", audioBlob);

          try {
              const response = await fetch("/process-audio", {
                  method: "POST",
                  body: formData,
              });

              if (response.ok) {
                  const result = await response.json();
                  conversation.innerHTML += `<p><strong>You:</strong> ${result.input}</p>`;
                  conversation.innerHTML += `<p><strong>Friday:</strong> ${result.output}</p>`;
                  conversation.scrollTop = conversation.scrollHeight;

                  const audio = new Audio(result.audio_url);
                  audio.play();

                  status.textContent = "Waiting for wake word...";
              } else {
                  console.error("Server error:", response.statusText);
                  status.textContent = "Error occurred. Please try again.";
              }
          } catch (error) {
              console.error("Upload failed:", error);
              status.textContent = "Error occurred. Please try again.";
          }

          recordedChunks = [];
      };

      startButton.addEventListener("click", startListening);
      stopButton.addEventListener("click", stopListening);

  } catch (error) {
      console.error("Failed to get media:", error);
      status.textContent = "Error: Could not access microphone.";
  }
});